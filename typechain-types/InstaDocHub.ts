/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace PatientRecords {
  export type RecordStruct = {
    doctor: AddressLike;
    description: string;
    ipfsHash: string;
    timestamp: BigNumberish;
    encrypted: boolean;
  };

  export type RecordStructOutput = [
    doctor: string,
    description: string,
    ipfsHash: string,
    timestamp: bigint,
    encrypted: boolean
  ] & {
    doctor: string;
    description: string;
    ipfsHash: string;
    timestamp: bigint;
    encrypted: boolean;
  };
}

export interface InstaDocHubInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addRecordForPatient"
      | "approveDoctor"
      | "consentRegistry"
      | "doctorRegistry"
      | "escrow"
      | "isDoctorVerified"
      | "patientRecords"
      | "registerPatient"
      | "registeredPatients"
      | "revokeDoctor"
      | "viewMyRecords"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DoctorApproved"
      | "DoctorRevoked"
      | "PatientRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addRecordForPatient",
    values: [AddressLike, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "approveDoctor",
    values: [AddressLike, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "consentRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "doctorRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "escrow", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isDoctorVerified",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "patientRecords",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerPatient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredPatients",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDoctor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "viewMyRecords",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addRecordForPatient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveDoctor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consentRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doctorRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDoctorVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "patientRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPatient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredPatients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDoctor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewMyRecords",
    data: BytesLike
  ): Result;
}

export namespace DoctorApprovedEvent {
  export type InputTuple = [doctor: AddressLike];
  export type OutputTuple = [doctor: string];
  export interface OutputObject {
    doctor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DoctorRevokedEvent {
  export type InputTuple = [doctor: AddressLike];
  export type OutputTuple = [doctor: string];
  export interface OutputObject {
    doctor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PatientRegisteredEvent {
  export type InputTuple = [patient: AddressLike];
  export type OutputTuple = [patient: string];
  export interface OutputObject {
    patient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface InstaDocHub extends BaseContract {
  connect(runner?: ContractRunner | null): InstaDocHub;
  waitForDeployment(): Promise<this>;

  interface: InstaDocHubInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addRecordForPatient: TypedContractMethod<
    [
      patient: AddressLike,
      description: string,
      recordCID: string,
      encrypted: boolean
    ],
    [void],
    "nonpayable"
  >;

  approveDoctor: TypedContractMethod<
    [
      doctorAddr: AddressLike,
      name: string,
      specialization: string,
      profileCID: string
    ],
    [void],
    "nonpayable"
  >;

  consentRegistry: TypedContractMethod<[], [string], "view">;

  doctorRegistry: TypedContractMethod<[], [string], "view">;

  escrow: TypedContractMethod<[], [string], "view">;

  isDoctorVerified: TypedContractMethod<
    [doctor: AddressLike],
    [boolean],
    "view"
  >;

  patientRecords: TypedContractMethod<[], [string], "view">;

  registerPatient: TypedContractMethod<[], [void], "nonpayable">;

  registeredPatients: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  revokeDoctor: TypedContractMethod<
    [doctorAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  viewMyRecords: TypedContractMethod<
    [],
    [PatientRecords.RecordStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addRecordForPatient"
  ): TypedContractMethod<
    [
      patient: AddressLike,
      description: string,
      recordCID: string,
      encrypted: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveDoctor"
  ): TypedContractMethod<
    [
      doctorAddr: AddressLike,
      name: string,
      specialization: string,
      profileCID: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "consentRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "doctorRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "escrow"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isDoctorVerified"
  ): TypedContractMethod<[doctor: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "patientRecords"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerPatient"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registeredPatients"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "revokeDoctor"
  ): TypedContractMethod<[doctorAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "viewMyRecords"
  ): TypedContractMethod<[], [PatientRecords.RecordStructOutput[]], "view">;

  getEvent(
    key: "DoctorApproved"
  ): TypedContractEvent<
    DoctorApprovedEvent.InputTuple,
    DoctorApprovedEvent.OutputTuple,
    DoctorApprovedEvent.OutputObject
  >;
  getEvent(
    key: "DoctorRevoked"
  ): TypedContractEvent<
    DoctorRevokedEvent.InputTuple,
    DoctorRevokedEvent.OutputTuple,
    DoctorRevokedEvent.OutputObject
  >;
  getEvent(
    key: "PatientRegistered"
  ): TypedContractEvent<
    PatientRegisteredEvent.InputTuple,
    PatientRegisteredEvent.OutputTuple,
    PatientRegisteredEvent.OutputObject
  >;

  filters: {
    "DoctorApproved(address)": TypedContractEvent<
      DoctorApprovedEvent.InputTuple,
      DoctorApprovedEvent.OutputTuple,
      DoctorApprovedEvent.OutputObject
    >;
    DoctorApproved: TypedContractEvent<
      DoctorApprovedEvent.InputTuple,
      DoctorApprovedEvent.OutputTuple,
      DoctorApprovedEvent.OutputObject
    >;

    "DoctorRevoked(address)": TypedContractEvent<
      DoctorRevokedEvent.InputTuple,
      DoctorRevokedEvent.OutputTuple,
      DoctorRevokedEvent.OutputObject
    >;
    DoctorRevoked: TypedContractEvent<
      DoctorRevokedEvent.InputTuple,
      DoctorRevokedEvent.OutputTuple,
      DoctorRevokedEvent.OutputObject
    >;

    "PatientRegistered(address)": TypedContractEvent<
      PatientRegisteredEvent.InputTuple,
      PatientRegisteredEvent.OutputTuple,
      PatientRegisteredEvent.OutputObject
    >;
    PatientRegistered: TypedContractEvent<
      PatientRegisteredEvent.InputTuple,
      PatientRegisteredEvent.OutputTuple,
      PatientRegisteredEvent.OutputObject
    >;
  };
}
