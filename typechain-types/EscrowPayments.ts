/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface EscrowPaymentsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "appointments"
      | "bookAppointment"
      | "cancelAppointment"
      | "completeAppointment"
      | "disputeAppointment"
      | "nextAppointmentId"
      | "resolveDispute"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AppointmentBooked"
      | "AppointmentCancelled"
      | "AppointmentCompleted"
      | "AppointmentDisputed"
      | "FundsReleased"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "appointments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bookAppointment",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAppointment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeAppointment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeAppointment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextAppointmentId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "appointments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bookAppointment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAppointment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeAppointment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeAppointment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextAppointmentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
}

export namespace AppointmentBookedEvent {
  export type InputTuple = [
    appointmentId: BigNumberish,
    patient: AddressLike,
    doctor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    appointmentId: bigint,
    patient: string,
    doctor: string,
    amount: bigint
  ];
  export interface OutputObject {
    appointmentId: bigint;
    patient: string;
    doctor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AppointmentCancelledEvent {
  export type InputTuple = [appointmentId: BigNumberish];
  export type OutputTuple = [appointmentId: bigint];
  export interface OutputObject {
    appointmentId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AppointmentCompletedEvent {
  export type InputTuple = [appointmentId: BigNumberish];
  export type OutputTuple = [appointmentId: bigint];
  export interface OutputObject {
    appointmentId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AppointmentDisputedEvent {
  export type InputTuple = [appointmentId: BigNumberish];
  export type OutputTuple = [appointmentId: bigint];
  export interface OutputObject {
    appointmentId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsReleasedEvent {
  export type InputTuple = [
    appointmentId: BigNumberish,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [appointmentId: bigint, to: string, amount: bigint];
  export interface OutputObject {
    appointmentId: bigint;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EscrowPayments extends BaseContract {
  connect(runner?: ContractRunner | null): EscrowPayments;
  waitForDeployment(): Promise<this>;

  interface: EscrowPaymentsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  appointments: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        patient: string;
        doctor: string;
        amount: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  bookAppointment: TypedContractMethod<
    [doctor: AddressLike],
    [bigint],
    "payable"
  >;

  cancelAppointment: TypedContractMethod<
    [appointmentId: BigNumberish],
    [void],
    "nonpayable"
  >;

  completeAppointment: TypedContractMethod<
    [appointmentId: BigNumberish],
    [void],
    "nonpayable"
  >;

  disputeAppointment: TypedContractMethod<
    [appointmentId: BigNumberish],
    [void],
    "nonpayable"
  >;

  nextAppointmentId: TypedContractMethod<[], [bigint], "view">;

  resolveDispute: TypedContractMethod<
    [appointmentId: BigNumberish, winner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "appointments"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        patient: string;
        doctor: string;
        amount: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "bookAppointment"
  ): TypedContractMethod<[doctor: AddressLike], [bigint], "payable">;
  getFunction(
    nameOrSignature: "cancelAppointment"
  ): TypedContractMethod<[appointmentId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeAppointment"
  ): TypedContractMethod<[appointmentId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disputeAppointment"
  ): TypedContractMethod<[appointmentId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nextAppointmentId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<
    [appointmentId: BigNumberish, winner: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AppointmentBooked"
  ): TypedContractEvent<
    AppointmentBookedEvent.InputTuple,
    AppointmentBookedEvent.OutputTuple,
    AppointmentBookedEvent.OutputObject
  >;
  getEvent(
    key: "AppointmentCancelled"
  ): TypedContractEvent<
    AppointmentCancelledEvent.InputTuple,
    AppointmentCancelledEvent.OutputTuple,
    AppointmentCancelledEvent.OutputObject
  >;
  getEvent(
    key: "AppointmentCompleted"
  ): TypedContractEvent<
    AppointmentCompletedEvent.InputTuple,
    AppointmentCompletedEvent.OutputTuple,
    AppointmentCompletedEvent.OutputObject
  >;
  getEvent(
    key: "AppointmentDisputed"
  ): TypedContractEvent<
    AppointmentDisputedEvent.InputTuple,
    AppointmentDisputedEvent.OutputTuple,
    AppointmentDisputedEvent.OutputObject
  >;
  getEvent(
    key: "FundsReleased"
  ): TypedContractEvent<
    FundsReleasedEvent.InputTuple,
    FundsReleasedEvent.OutputTuple,
    FundsReleasedEvent.OutputObject
  >;

  filters: {
    "AppointmentBooked(uint256,address,address,uint256)": TypedContractEvent<
      AppointmentBookedEvent.InputTuple,
      AppointmentBookedEvent.OutputTuple,
      AppointmentBookedEvent.OutputObject
    >;
    AppointmentBooked: TypedContractEvent<
      AppointmentBookedEvent.InputTuple,
      AppointmentBookedEvent.OutputTuple,
      AppointmentBookedEvent.OutputObject
    >;

    "AppointmentCancelled(uint256)": TypedContractEvent<
      AppointmentCancelledEvent.InputTuple,
      AppointmentCancelledEvent.OutputTuple,
      AppointmentCancelledEvent.OutputObject
    >;
    AppointmentCancelled: TypedContractEvent<
      AppointmentCancelledEvent.InputTuple,
      AppointmentCancelledEvent.OutputTuple,
      AppointmentCancelledEvent.OutputObject
    >;

    "AppointmentCompleted(uint256)": TypedContractEvent<
      AppointmentCompletedEvent.InputTuple,
      AppointmentCompletedEvent.OutputTuple,
      AppointmentCompletedEvent.OutputObject
    >;
    AppointmentCompleted: TypedContractEvent<
      AppointmentCompletedEvent.InputTuple,
      AppointmentCompletedEvent.OutputTuple,
      AppointmentCompletedEvent.OutputObject
    >;

    "AppointmentDisputed(uint256)": TypedContractEvent<
      AppointmentDisputedEvent.InputTuple,
      AppointmentDisputedEvent.OutputTuple,
      AppointmentDisputedEvent.OutputObject
    >;
    AppointmentDisputed: TypedContractEvent<
      AppointmentDisputedEvent.InputTuple,
      AppointmentDisputedEvent.OutputTuple,
      AppointmentDisputedEvent.OutputObject
    >;

    "FundsReleased(uint256,address,uint256)": TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;
    FundsReleased: TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;
  };
}
