/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ConsentRegistry {
  export type ConsentStruct = {
    patient: AddressLike;
    doctor: AddressLike;
    encryptedCID: string;
    timestamp: BigNumberish;
    active: boolean;
  };

  export type ConsentStructOutput = [
    patient: string,
    doctor: string,
    encryptedCID: string,
    timestamp: bigint,
    active: boolean
  ] & {
    patient: string;
    doctor: string;
    encryptedCID: string;
    timestamp: bigint;
    active: boolean;
  };
}

export interface ConsentRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "consentExists"
      | "consents"
      | "consentsLength"
      | "createConsent"
      | "getConsent"
      | "revokeConsent"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ConsentCreated" | "ConsentRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "consentExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "consents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "consentsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createConsent",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getConsent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeConsent",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "consentExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "consents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "consentsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createConsent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConsent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeConsent",
    data: BytesLike
  ): Result;
}

export namespace ConsentCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    patient: AddressLike,
    doctor: AddressLike,
    cid: string
  ];
  export type OutputTuple = [
    id: bigint,
    patient: string,
    doctor: string,
    cid: string
  ];
  export interface OutputObject {
    id: bigint;
    patient: string;
    doctor: string;
    cid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsentRevokedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConsentRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ConsentRegistry;
  waitForDeployment(): Promise<this>;

  interface: ConsentRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  consentExists: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  consents: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean] & {
        patient: string;
        doctor: string;
        encryptedCID: string;
        timestamp: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  consentsLength: TypedContractMethod<[], [bigint], "view">;

  createConsent: TypedContractMethod<
    [doctor: AddressLike, encryptedCID: string],
    [bigint],
    "nonpayable"
  >;

  getConsent: TypedContractMethod<
    [id: BigNumberish],
    [ConsentRegistry.ConsentStructOutput],
    "view"
  >;

  revokeConsent: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "consentExists"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "consents"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean] & {
        patient: string;
        doctor: string;
        encryptedCID: string;
        timestamp: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "consentsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createConsent"
  ): TypedContractMethod<
    [doctor: AddressLike, encryptedCID: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getConsent"
  ): TypedContractMethod<
    [id: BigNumberish],
    [ConsentRegistry.ConsentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeConsent"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "ConsentCreated"
  ): TypedContractEvent<
    ConsentCreatedEvent.InputTuple,
    ConsentCreatedEvent.OutputTuple,
    ConsentCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ConsentRevoked"
  ): TypedContractEvent<
    ConsentRevokedEvent.InputTuple,
    ConsentRevokedEvent.OutputTuple,
    ConsentRevokedEvent.OutputObject
  >;

  filters: {
    "ConsentCreated(uint256,address,address,string)": TypedContractEvent<
      ConsentCreatedEvent.InputTuple,
      ConsentCreatedEvent.OutputTuple,
      ConsentCreatedEvent.OutputObject
    >;
    ConsentCreated: TypedContractEvent<
      ConsentCreatedEvent.InputTuple,
      ConsentCreatedEvent.OutputTuple,
      ConsentCreatedEvent.OutputObject
    >;

    "ConsentRevoked(uint256)": TypedContractEvent<
      ConsentRevokedEvent.InputTuple,
      ConsentRevokedEvent.OutputTuple,
      ConsentRevokedEvent.OutputObject
    >;
    ConsentRevoked: TypedContractEvent<
      ConsentRevokedEvent.InputTuple,
      ConsentRevokedEvent.OutputTuple,
      ConsentRevokedEvent.OutputObject
    >;
  };
}
