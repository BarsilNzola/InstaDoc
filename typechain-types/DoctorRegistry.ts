/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DoctorRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "doctors"
      | "isVerified"
      | "registerDoctor"
      | "revokeDoctor"
      | "transferAdmin"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DoctorRegistered" | "DoctorRevoked"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "doctors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerified",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDoctor",
    values: [AddressLike, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDoctor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAdmin",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doctors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isVerified", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDoctor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDoctor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAdmin",
    data: BytesLike
  ): Result;
}

export namespace DoctorRegisteredEvent {
  export type InputTuple = [
    doctor: AddressLike,
    name: string,
    specialization: string,
    profileCID: string
  ];
  export type OutputTuple = [
    doctor: string,
    name: string,
    specialization: string,
    profileCID: string
  ];
  export interface OutputObject {
    doctor: string;
    name: string;
    specialization: string;
    profileCID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DoctorRevokedEvent {
  export type InputTuple = [doctor: AddressLike];
  export type OutputTuple = [doctor: string];
  export interface OutputObject {
    doctor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DoctorRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): DoctorRegistry;
  waitForDeployment(): Promise<this>;

  interface: DoctorRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  doctors: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, boolean] & {
        name: string;
        specialization: string;
        profileCID: string;
        verified: boolean;
      }
    ],
    "view"
  >;

  isVerified: TypedContractMethod<[doctorAddr: AddressLike], [boolean], "view">;

  registerDoctor: TypedContractMethod<
    [
      doctorAddr: AddressLike,
      name: string,
      specialization: string,
      profileCID: string
    ],
    [void],
    "nonpayable"
  >;

  revokeDoctor: TypedContractMethod<
    [doctorAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  transferAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "doctors"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, boolean] & {
        name: string;
        specialization: string;
        profileCID: string;
        verified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isVerified"
  ): TypedContractMethod<[doctorAddr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerDoctor"
  ): TypedContractMethod<
    [
      doctorAddr: AddressLike,
      name: string,
      specialization: string,
      profileCID: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeDoctor"
  ): TypedContractMethod<[doctorAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "DoctorRegistered"
  ): TypedContractEvent<
    DoctorRegisteredEvent.InputTuple,
    DoctorRegisteredEvent.OutputTuple,
    DoctorRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "DoctorRevoked"
  ): TypedContractEvent<
    DoctorRevokedEvent.InputTuple,
    DoctorRevokedEvent.OutputTuple,
    DoctorRevokedEvent.OutputObject
  >;

  filters: {
    "DoctorRegistered(address,string,string,string)": TypedContractEvent<
      DoctorRegisteredEvent.InputTuple,
      DoctorRegisteredEvent.OutputTuple,
      DoctorRegisteredEvent.OutputObject
    >;
    DoctorRegistered: TypedContractEvent<
      DoctorRegisteredEvent.InputTuple,
      DoctorRegisteredEvent.OutputTuple,
      DoctorRegisteredEvent.OutputObject
    >;

    "DoctorRevoked(address)": TypedContractEvent<
      DoctorRevokedEvent.InputTuple,
      DoctorRevokedEvent.OutputTuple,
      DoctorRevokedEvent.OutputObject
    >;
    DoctorRevoked: TypedContractEvent<
      DoctorRevokedEvent.InputTuple,
      DoctorRevokedEvent.OutputTuple,
      DoctorRevokedEvent.OutputObject
    >;
  };
}
